#!/usr/bin/perl -w

sub adder{
        my $x = shift();        # в котором x - свободная переменная,
        sub{
                my $y = shift();        # а y - связанная переменная
                $x + $y;
        };
}
 
$add1 = adder(1);       # делаем процедуру для прибавления 1
print  "add1 = $add1\n";
print "$add1->(10)\n";      # печатает 11

#$sub1 = adder(-1);      # делаем процедуру для вычитания 1
#print $sub1->(10);      # печатает 9

# функция которая замыкает что-то и передает дльше называется колбэком!
#                                                             Монс!

#callback, он же обратный вызов, это действие, которое выполняется по возникновению какого-либо события.
# Например, запросить данные с google.com, а по получению данных вывести их на стандартный вывод.

#Важнейший абзац. 
#Нельзя просто так взять и вернуть данные из callback. Они существуют в своем мирке со своими правилами, область видимости функции. Использовать глобальные переменные можно, но не всегда, а там где можно — нежелательно. Единственный способ получить данные в другом месте, вне callback — их туда отправить. Или же заблокироваться и поднять на уровень выше. В правильном асинхронном приложении данные внутри callback не должны влиять на данные, которые находятся на уровень выше. Исключение — чистые данные и чистые функции. Иногда ссылки на данные. Но очень осторожно.


